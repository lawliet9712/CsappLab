# 从地址 0 开始执行
.pos 0
irmovq stack, %rsp      # Set up stack pointer
call main        # Execute main program
halt                            # Terminate program 

# 跳转表
.align 8
table:
.quad 0x00000000015e
.quad 0x00000000017f
.quad 0x000000000169
.quad 0x000000000174
.quad 0x00000000017f
.quad 0x000000000169
.quad 0x00000000017f

# 主函数
main:
irmovq $1,%rdi
call switchv    # switchv(3)
ret

        .pos 0x100
# long switchv(long idx)
# idx in %rdi
# 地址：0x100
        switchv:
        irmovq 0xaaa, %r8# %r8 = 0xaaa
        irmovq 0xbbb, %r9             # %r9 = 0xbbb
        irmovq 0xccc, %r10# %r10 = 0xccc
        irmovq 0xddd, %r11  # %r11 = 0x‭ddd
        irmovq $5, %r12 # %r12 = 5
        irmovq table, %r13                          # %r13 = table
        rrmovq %rdi, %rdx
        subq %r12, %rdx     # idx - 5
        jg default         # idx > 5 -> jmp default
        addq %rdi, %rdi         # idx = 2 * idx
        addq %rdi, %rdi     # idx = 4 * idx
        addq %rdi, %rdi     # idx = 8 * idx
        addq %rdi, %r13     # %r13 = table + 8 * idx
        mrmovq (%r13), %r13
        pushq %r13
        ret
# 地址：0x15e
        rrmovq %r8, %rax
        jmp Done
# 地址：0x169
        rrmovq %r9, %rax
        jmp Done
# 地址：0x174
        rrmovq %r10, %rax
        jmp Done
# 地址：0x17f
    default:
        rrmovq %r11, %rax
            Done:
            ret

# 栈从 0x200 向低地址生长
            .pos 0x200
            stack:
