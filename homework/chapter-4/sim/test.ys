# 从地址 0 开始执行
.pos 0
irmovq stack, %rsp      # Set up stack pointer
call main        # Execute main program
halt        # Terminate program 

.align 8
array:
.quad 0x000000000ad # case 0
.quad 0x000000000e6 # case 1 default case
.quad 0x000000000c0 # case 2
.quad 0x000000000d3 # case 3
.quad 0x000000000e6 # case 4 default case
.quad 0x000000000c0 # case 5

# 主函数
main:
irmovq $6, %rdi
call switchv    # switchv(1)
ret

# void bubble_b(long *data, long count)
# data in %rdi, count in %rsi
switchv:
    irmovq $0, %rax
    irmovq $6, %r8
    irmovq $1, %r9
    irmovq array, %rbx
    rrmovq %rdi, %rdx              # %rdi > 6 default case
    subq  %r8, %rdx
    cmovge %r9, %rdi
    irmovq $0, %rdx
    subq %rdi, %rdx
    cmovg %r9, %rdi                # %rdi < 0 default case
    addq  %rdi, %rdi               # %rdi = 2 * i
    addq  %rdi, %rdi               # %rdi = 4 * i
    addq  %rdi, %rdi               # %rdi = 8 * i
    addq  %rdi, %rbx               # %rdi = array + 8 * i 
    mrmovq (%rbx), %rbx
    pushq %rbx
    ret                            # Return
    irmovq $0xaaa, %rax
    jmp Done
    irmovq $0xbbb, %rax
    jmp Done
    irmovq $0xccc, %rax
    jmp Done
    irmovq $0xddd, %rax
Done:
    ret
# 栈从 0x200 向低地址生长
.pos 0x200
stack:
